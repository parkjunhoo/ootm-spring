package kr.team3.ootm.dao.product;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;


@Repository
public class ProductDAOImpl implements ProductDAO{
	@Autowired
	private JdbcTemplate template;
	
	@Override
	public int insert(ProductDTO product) {
		return template.update("insert into product() values(null,?,?,?,?,?,?,?,?,'y',now(),?,?,?)", 
				product.getProduct_category_id(),
				product.getProduct_sub_category_id(),
				product.getProduct_name(),
				product.getProduct_price(),
				product.getProduct_discount_rate(),
				product.getProduct_content(),
				product.getProduct_image(),
				product.getProduct_image2(),
				product.getProduct_quantity(),
				product.getProduct_sale_rate(),
				product.getProduct_tag());
	}

	@Override
	public ProductDTO read(int product_id) {
		return template.queryForObject("select * from product where product_id = ?", 
				new Object[] {product_id}, new ProductRowMapper());
	}
	

	@Override
	public int delete(int product_id) {
		return 1;
	}

	@Override
	public List<ProductDTO> selectAllProduct() {
		return template.query("select * from product",new ProductRowMapper());
	}

	@Override
	public List<ProductDTO> selectBestProduct(int amount) {
		String sql = "select * from product order by product_sale_rate desc limit ?";
		
		List<ProductDTO> result = template.query(sql, 
		new Object[] {amount}, new ProductRowMapper());
		
		return result;
	}
	
	@Override
	public List<ProductDTO> selectNewProduct(int amount) {
		String sql = "select * from product order by product_regdate desc limit ?";
		
		List<ProductDTO> result = template.query(sql, 
		new Object[] {amount}, new ProductRowMapper());
		
		return result;
	}

	@Override
	public List<ProductDTO> selectByCategoryOrderByNew(int product_category_id) {
		String sql = "select * from product where product_category_id = ? order by product_regdate desc";
		List<ProductDTO> result = template.query(sql,
				new Object[] {product_category_id} , new ProductRowMapper());
		
		return result;
	}

	@Override
	public List<ProductDTO> selectBySubCategoryOrderByNew(int product_sub_category_id) {
		String sql = "select * from product where product_sub_category_id = ? order by product_regdate desc";
		List<ProductDTO> result = template.query(sql,
				new Object[] {product_sub_category_id} , new ProductRowMapper());
		
		return result;
	}
	
	@Override
	public List<ProductDTO> selectByCategoryOrderByBestLimit(int product_category_id , int limit) {
		String sql = "select * from product where product_category_id = ? order by product_regdate desc limit ?";
		List<ProductDTO> result = template.query(sql,
				new Object[] {product_category_id , limit} , new ProductRowMapper());
		
		return result;
	}

	@Override
	public List<ProductDTO> selectBySubCategoryOrderByBestLimit(int product_sub_category_id) {
		String sql = "select * from product where product_sub_category_id = ? order by product_regdate desc";
		List<ProductDTO> result = template.query(sql,
				new Object[] {product_sub_category_id} , new ProductRowMapper());
		
		return result;
	}
	
}
